// arrayList

// 선형 리스트(ArrayList 혹은 Lineaer List)

	// 중요한 특징
	// 자료가 연속적으로 저장 및 관리
	// 메모리의 관점에서도 연속적으로 저장 되어 있다.
	// '포인터'를 포함하지 않음 -> 인덱스로 특정한 위치 직접 접근 가능

#include <stdio.h>
#define LIST_SIZE 10        // 리스트의 크기

int linearList[LIST_SIZE] = { 0 };
int numOfDatas = 0;

void listInit() {
	numOfDatas = 0;
}

void insert(int data) {
	if (numOfDatas == LIST_SIZE) {
		printf("리꽉... : (\n\n");
	}
	else {
		linearList[numOfDatas++] = data;
	}
}

void readAll() {
	if (numOfDatas == 0)
		printf("리스트에 저장된 자료가 없습니다.\n\n");
	else {
		for (int i = 0; i < numOfDatas; i++)
			printf("[%d]", linearList[i]);
	}
	printf("\n");
}

// search - find
// 있으면 인덱스 번화를 반환, 없으면 -1을 반환s
int search(int data) {
	if (numOfDatas == 0)
		printf("리스트에 저장된 자료가 없습니다.\n\n");
	else {
		for (int i = 0; i < numOfDatas; i++) {
			if (linearList[i] == data)
				return i;
		}
		return -1;
	}
}

// update
void update(int targetData, int updateData) {
	if (numOfDatas == 0)
		printf("리스트에 저장된 자료가 없습니다.\n\n");
	/*else {
		for (int i = 0; i < numOfDatas; i++) {
			if (linearList[i] == targetData) {
				linearList[i] = updateData;
				return;
			}
		}
	}*/
	else {
		int index = search(targetData);
		if (index != -1) {  // 값이 존재할 때
			linearList[index] = updateData;  // 값이 중복되어도 하나 밖에 update되지 않음
		}
	}
}

// delete
void deleteFunction(int deleteData) {
	if (numOfDatas == 0)
		printf("리스트에 저장된 자료가 없습니다.\n\n");
	else {
		for (int i = 0; i < numOfDatas; i++) {
			if (linearList[i] == deleteData) {
				for (int j = i; j < numOfDatas - 1; j++) {
					linearList[j] = linearList[j + 1];
					//return;
					//// 가장 처음 만난 한 개의 데이터만 지울 수 있음
				}
				i--;
				numOfDatas--;
			}
		}
	}
	//else {
	//	int index = search(targetData);
	//	if (index != -1) {  // 값이 존재할 때
	//		linearList[index] = updateData;  // 값이 중복되어도 하나 밖에 update되지 않음
	//	}
	//}
}

int main() {
	/*for (int i = 0; i < 5; i++)
		insert(i);
	
	readAll();

	printf("%d(이)가 있는 인덱스 : %d\n", 10, search(10));
	printf("%d(이)가 있는 인덱스 : %d\n", 3, search(3));

	update(3, 300);

	readAll();*/

	insert(1);	insert(3);	insert(3);	insert(2);	insert(6);	insert(5);
	readAll();
	deleteFunction(3);
	readAll();
}
