//closure

코드의 블럭

일급 시민(first-citizen)

변수, 상수 등으로 저장, 전달인자로 전달이 가능

함수 : 이름이 있는 클로저

{ (매개변수 목록) → 반환타입 in

실행코드

}


// 매개변수 없을 경우 괄호만, 반환타입 없을 경우 viod

// 함수를 사용한다면

func sumFuncion(a: Int, b: Int) → Int {

return a + b

}

var sumResult: Int = sumFunction(a: 1, b: 2)

print(sumResult) // 3

// 함수는 클로저의 일종이므로

// sum 변수에는 당연히 함수도 할당할 수 있음

sum = sumFunction(a:b:)

sumResult = sum(1, 2)

print(sumResult) // 3


함수 전달인자로서의 클로저

let add: (Int, Int) → Int

add = { (a: Int, b: Int) → Int in

return a + b

}

let substract: (Int, Int) → Int

substract = { (a: Int, b: Int) → Int in

return a - b

}

let divide: (Int, Int) → Int

divide = { (a: Int, b: Int) → Int in

return a / b

}

func calculate(a: Int, b: Int, method: (Int, Int) → Int) → Int {

return method(a, b)

}

var calculated: Int

calculate = calculate(a: 50, b: 10, method: add)

print(calculated) // 60

calculated = calculate(a: 50, b: 10, method: substract)

print(calculated) // 40

calculated = calculate(a: 50, b: 10, method: divide)

print(calculated) // 5

calculated = calculate(a: 50, b: 10, method: substract)

print(calculated) // 40

calculated = calculate(a: 50, b: 10, method: divide)

print(calculated) // 5

calculated = calculate(a: 50, b: 10, method: {left: Int, right: Int) → Int

return left * right

})

print(calculated) // 500
