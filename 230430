### 옵셔널

옵셔널 : 값이 있을 수도 있고, 없을 수도 있음 옵셔널에서만 nil을 사용할 수 있음 → 옵셔널이 아니라면 nil이 아니기 때문에 확인을 안 하고도 쓸 수가 있어 옵셔널이 필요함

해당 변수 또는 상수에는 값이 없을 수 있다.라고 생각하는게 편함 

?, Optional<타입> 모두 사용 가능

var optinalType1: String?
var optinalType2: Optinal<Int>

!을 붙이는게 가장 간단한 방법이지만 가장 위험한 방법 -> 런타임 오류가 일어날 가능성이 가장 높기 때문 강제추출방식은 런타임 오류의 가능성이 높기 때문에 지양하기

옵셔널 바인딩 : 값이 있는지 확인할 때 쓰는 방법 옵셔널 바인딩을 통해 쉼표를 이용해 여러개의 옵셔널을 추출할 수도 있음 

암시적 추출 옵셔널 : nil을 할당하고 싶지만 매번 옵셔널 바인딩으로 추출하는게 귀찮거나 로직상으로 nil 때문에 오류가 안 날 것 같다는 확신이 드는 경우 nil을 할당해줄 수 있는 상수나 변수가 있으면 좋을 것 같다고 생각이 들 때 사용 암시적 추출 옵셔널을 이용하려면 타입 뒤에 !붙임 암시적 추출 옵셔널로 지정된 타입은 일반 값으로도 사용할 수 있지만 여전히 옵셔널이기 때문에 nil도 할당할 수 있음

### 구조체와 클래스의 차이점

- 구조체는 상속이 안 되지만 클래스는 상속이 됨
- 구조체는 초기화 코드를 안 적어도 되지만 클래스는 적어줘야 됨
