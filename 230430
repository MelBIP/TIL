### 프로퍼티

1. 저장 프로퍼티 - 인스턴스의 변수 또는 상수를 의미

2. 연산 프로퍼티 - 값을 저장하는 게 아닌 특정 연산을 실행하는 결과 값

3. 타입 프로퍼티 - 특정 타입에서만 실행되는 것

### 옵셔널

옵셔널 : 값이 있을 수도 있고, 없을 수도 있음 옵셔널에서만 nil을 사용할 수 있음 → 옵셔널이 아니라면 nil이 아니기 때문에 확인을 안 하고도 쓸 수가 있어 옵셔널이 필요함

해당 변수 또는 상수에는 값이 없을 수 있다.라고 생각하는게 편함 

?, Optional<타입> 모두 사용 가능

var optinalType1: String?
var optinalType2: Optinal<Int>

!을 붙이는게 가장 간단한 방법이지만 가장 위험한 방법 -> 런타임 오류가 일어날 가능성이 가장 높기 때문 강제추출방식은 런타임 오류의 가능성이 높기 때문에 지양하기

옵셔널 바인딩 : 값이 있는지 확인할 때 쓰는 방법 옵셔널 바인딩을 통해 쉼표를 이용해 여러개의 옵셔널을 추출할 수도 있음 

암시적 추출 옵셔널 : nil을 할당하고 싶지만 매번 옵셔널 바인딩으로 추출하는게 귀찮거나 로직상으로 nil 때문에 오류가 안 날 것 같다는 확신이 드는 경우 nil을 할당해줄 수 있는 상수나 변수가 있으면 좋을 것 같다고 생각이 들 때 사용 암시적 추출 옵셔널을 이용하려면 타입 뒤에 !붙임 암시적 추출 옵셔널로 지정된 타입은 일반 값으로도 사용할 수 있지만 여전히 옵셔널이기 때문에 nil도 할당할 수 있음

### struct, class, enum의 차이점

- 구조체는 초기화 코드를 안 적어도 되지만 클래스는 적어줘야 됨

- class
    - ‘인스턴스’라는 용어 사용
    - 단일 상속만
    - (인스턴스/타입) 메서드 or 프로퍼티
    - 참조타입
    - 데이터를 전달할 때 값의 메모리 위치를 전달
    - 주소를 복사하여 이미 존재하는 인스턴스의 위치 가리킴 참조하는 값이 존재하는 위치를 stack 메모리 영역에, 참조되는 값은 heap 메모리 영역에 저장
    - 프레임워크 대부분이 클래스로 구성
- struct
    - 상속 불가
    - (인스턴스/타입) 메서드 or 프로퍼티
    - 값 타입
    - 데이터를 전달할 때 값을 복사하여 전달
    - 값이 복사되어 새로운 인스턴스가 생성되고, 이 인스턴스가 stack 메모리 영역에 저장
    - Swift의 대부분의 뼈대는 모두 구조체로 구성되어 있음
    - 참조가 아닌 복사를 원할 때, 자신을 상속할 필요가 없거나 상속받을 필요가 없을 때 사용
- enum
    - 다른 언어의 열거형과는 다른 존재
    - 유사한 종류의 여러 값을 유의미한 이름으로 한 곳에 모아 정의한 것
    - 열거형 자체가 하나의 데이터 타입
    - 상속 불가
    - (인스턴스/타입) 메서드 or 연산 프로퍼티 지정
    - 기존 프로퍼티는 값을 저장하는 역할을 하지만 연산 프로퍼티는 특정한 연산을 통해 값을 리턴해주는 것을 의미
    - 값 타입
    
### Bounds와 Frame의 차이점

- Bounds : 자기 View가 원점이 됨
- Frame : Super View가 원점이 됨

### Delegate란?

- delegate란 객체 지향 프로그래밍에서 하나의 객체가 모든 일을 처리하는 것이 아니라 처리해야 할 일 중 일부를 다른 객체에게 넘기는 것을 의미
- 객체여서 참조값을 주고 받기때문에 retain이 됨

### View와 Layer의 차이점

- View : 화면에 애플리케이션의 콘텐츠를 나타내기 위해 사용
    - 위치 : UIKit에서 제공
    - 스레드 : 메인 스레드
    - UIResponder : UIResponder의 서브클래스이므로, tap, touch 등의 제스처 인식
    - 기능 : CALayer를 wrapping하고 있는 상태
    - 범용성 : UIKit은 모바일에서만 동작 cf) AppKit은 Mac에서만 동작
- Layer :
    - 위치 : Core Animation에서 제공
    - UIKit과는 다른 별도의 스레드 사용
    - UIRsponder : UIResponder가 없기 때문에 tap, touch 등 인식 X
    - 기능 : 복잡한 애니메이션과 퍼포먼스 측면에서 UIKit보다 우수
    - 범용성 : Mac과 모바일 모두 동작
