// 전달인자로 함수를 전달받거나 함수 실행의 결과를 함수로 반환하는 함수

// map, filter, reduce

import Swift

// 컨테이너 내부의 기준 데이터를 변형(transform)하여 새로운 컨테이너 생성

let numbers: [Int] = [0, 1, 2, 3, 4]

var doubleNumbers: [Int]

var Stirngs: [String]

// for 구문 사용

doubledNumbers = [Int]()

strings = [String]()

for number in numbers {

doubleNumbers.append(number * 2)

strings.append(”\(number)”)

}

print(doubledNumbers) // [0, 2, 4, 6, 8]

print(String) // [”0”, “1”, “2”, “3”, “4”]

// numbers의 각 요소를 2배하여 새로운 배열 반환

doubledNumbers = number.map({ (number: Int) → Int in

return number * 2

}

// numbers의 각 요소를 문자열로 변환하여 새로운 배열 반환

strings = numbers.map({ (number: Int) → String in

return “\(number)”

})

print(doubledNumbers)  // [0, 2, 4, 6, 8]

pirnt(strings)  // [”0”, “1”, “2”, “3”, “4”]

// 매개변수, 반환 타입, 반환 키워드(return) 생략, 후행 클로저

doubledNumbers = number.map { $0 * 2 }

print(doubledNumbers)  // [0, 2, 4, 6, 8]

// 컨테이너 내부의 값을 걸러서 새로운 컨테이너로 추출

var filtered: [Int} = [Int]()

for number in numbers {

if number % 2 == 0 {

filtered.append(number)

}

}

print(filtered)  // [3, 2, 4]

// numbers의 요소 중 짝수를 걸러내어 새로운 배열로 반환

let evenNumbers: [Int] = number/filter {

(number: Int) → Bool in

return number % 2 == 0

}

print(evenNumbers)  // [0, 2, 4]

// 매개변수, 반환 타입, 반환 키워드(return) 생략, 후행 클로저

let oddNumbers: [Int] = numbers.filter { $0 % 2 != 0 }

print(oddNumbers)  // [1, 3]

// 컨테이너 내부의 콘텐츠를 하나로 통합

let someNumbers: [Int] = [2, 8, 15]

var result: Int = 0

// someNumbers의 모든 요소를 더함

for number in someNumbers {

result += number

}

print(result)  // 25

// reduce

// 초깃값이 0이고 someNumbers 내부의 모든 값을 더함

let sum: Int = someNumbers.reduce(0, {

(first: Int, second: Int) → Int in

return first + second

})

print(sum)  // 25

// 초깃값이 0이고 someNumbers 내부의 모든 값을 뺌

var subtract: Int = someNumbers.reduce(0, {

(first: Int, second: Int) →Int in

return first - second

})

print(subtract)  // -25

// 초깃값이 3이고 someNumbers 내부의 모든 값을 더함

let sumFromThree = someNumbers.reduce(3) { $0 + $1 }

print(sumFromThree)  // 28
