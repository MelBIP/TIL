//
//  ViewController.swift
//  kakao_login
//
//  Created by 김주은 on 2022/11/07.
//

import UIKit
import SnapKit

class ViewController: UIViewController {

    lazy var kakaologinStatusLabel: UILabel = {
       let label = UILabel()
        label.text = "로그인 여부 라벨"
        return label
    }()
    
    lazy var kakaologinButton: UIButton = {
       let btn = UIButton()
        btn.setTitle("카카오 로그인", for: .normal)
        btn.configuration = .filled()
        btn.addTarget(self, action: #selector(loginBtnClicked), for: .touchUpInside)
        btn.translatesAutoresizingMaskIntoConstraints = false
        return btn
    }()
    
    lazy var kakaologoutButton: UIButton = {
       let btn = UIButton()
        btn.setTitle("카카오 로그아웃", for: .normal)
        btn.configuration = .filled()
        btn.addTarget(self, action: #selector(logoutBtnClicked), for: .touchUpInside)
        btn.translatesAutoresizingMaskIntoConstraints = false
        return btn
    }()
    
    lazy var stackView: UIStackView = {
        let stack = UIStackView()
        stack.spacing = 8
        stack.axis = .vertical
        stack.alignment = .center
        stack.distribution = .fill
        stack.translatesAutoresizingMaskIntoConstraints = false
        return stack
    }()
    
    lazy var kakaoAuthVM: KakaoAuthVM = { KakaoAuthVM() }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        kakaologinStatusLabel.snp.makeConstraints { make in
            make.height.greaterThanOrEqualTo(70)
        }
        
        stackView.addArrangedSubview(kakaologinStatusLabel)
        stackView.addArrangedSubview(kakaologinButton)
        stackView.addArrangedSubview(kakaologoutButton)
        
        self.view.addSubview(stackView)
        
        stackView.snp.makeConstraints { make in
            make.center.equalTo(self.view)
        }
        
    }
    
    // MARK: - 버튼 액션
    @objc func loginBtnClicked() {
        print("loginBtnClicked() called")
        kakaoAuthVM.handleKakaoLogin()
    }
    
    @objc func logoutBtnClicked() {
        print("logoutBtnClicked() called")
        kakaoAuthVM.kakaoLogout()
    }

}  // ViewController

#if DEBUG

import SwiftUI

struct ViewControllerPresentable: UIViewControllerRepresentable {
    func updateUIViewController(_ uiViewController:
        UIViewControllerType, context: Context) {
    }
    
    func makeUIViewController(context: Context) -> some UIViewController {
        ViewController()
    }
}

struct ViewControllerPrepresentable_PreviewProvider: PreviewProvider {
    static var previews: some View {
        ViewControllerPresentable()
    }
}


#endif
